// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: script.sql

package script

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const delete = `-- name: Delete :exec
DELETE FROM scripts WHERE created_at < $1
`

func (q *Queries) Delete(ctx context.Context, createdAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, delete, createdAt)
	return err
}

const getID = `-- name: GetID :one
SELECT id FROM scripts WHERE title=$1
`

func (q *Queries) GetID(ctx context.Context, title pgtype.Text) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getID, title)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const languages = `-- name: Languages :many
SELECT DISTINCT(language_id) from scripts
`

func (q *Queries) Languages(ctx context.Context) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, languages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var language_id pgtype.UUID
		if err := rows.Scan(&language_id); err != nil {
			return nil, err
		}
		items = append(items, language_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkContrib = `-- name: LinkContrib :exec
INSERT INTO contributors_scripts (contributor_id, script_id) VALUES($1, $2) ON CONFLICT (contributor_id, script_id) DO NOTHING
`

type LinkContribParams struct {
	ContributorID pgtype.UUID
	ScriptID      pgtype.UUID
}

func (q *Queries) LinkContrib(ctx context.Context, arg LinkContribParams) error {
	_, err := q.db.Exec(ctx, linkContrib, arg.ContributorID, arg.ScriptID)
	return err
}

const linkTag = `-- name: LinkTag :exec
INSERT INTO tags_scripts (tag_id, script_id) VALUES($1, $2) ON CONFLICT (tag_id, script_id) DO NOTHING
`

type LinkTagParams struct {
	TagID    pgtype.UUID
	ScriptID pgtype.UUID
}

func (q *Queries) LinkTag(ctx context.Context, arg LinkTagParams) error {
	_, err := q.db.Exec(ctx, linkTag, arg.TagID, arg.ScriptID)
	return err
}

const linkedContributors = `-- name: LinkedContributors :many
SELECT DISTINCT(contributor_id) FROM contributors_scripts
`

func (q *Queries) LinkedContributors(ctx context.Context) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, linkedContributors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var contributor_id pgtype.UUID
		if err := rows.Scan(&contributor_id); err != nil {
			return nil, err
		}
		items = append(items, contributor_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkedTags = `-- name: LinkedTags :many
SELECT DISTINCT(tag_id) FROM tags_scripts
`

func (q *Queries) LinkedTags(ctx context.Context) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, linkedTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var tag_id pgtype.UUID
		if err := rows.Scan(&tag_id); err != nil {
			return nil, err
		}
		items = append(items, tag_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsert = `-- name: Upsert :exec
INSERT INTO scripts (title, code, link_to_project, language_id, created_at) VALUES($1, $2, $3, $4, $5)
ON CONFLICT (title) DO UPDATE SET created_at = EXCLUDED.created_at
`

type UpsertParams struct {
	Title         pgtype.Text
	Code          pgtype.Text
	LinkToProject pgtype.Text
	LanguageID    pgtype.UUID
	CreatedAt     pgtype.Timestamptz
}

func (q *Queries) Upsert(ctx context.Context, arg UpsertParams) error {
	_, err := q.db.Exec(ctx, upsert,
		arg.Title,
		arg.Code,
		arg.LinkToProject,
		arg.LanguageID,
		arg.CreatedAt,
	)
	return err
}
