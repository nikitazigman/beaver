// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: script.sql

package script

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getID = `-- name: GetID :one
SELECT id FROM scripts WHERE title=$1
`

func (q *Queries) GetID(ctx context.Context, title pgtype.Text) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getID, title)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const linkContrib = `-- name: LinkContrib :exec
INSERT INTO contributors_scripts (contributor_id, script_id) VALUES($1, $2) ON CONFLICT (contributor_id, script_id) DO NOTHING
`

type LinkContribParams struct {
	ContributorID pgtype.UUID
	ScriptID      pgtype.UUID
}

func (q *Queries) LinkContrib(ctx context.Context, arg LinkContribParams) error {
	_, err := q.db.Exec(ctx, linkContrib, arg.ContributorID, arg.ScriptID)
	return err
}

const linkTag = `-- name: LinkTag :exec
INSERT INTO tags_scripts (tag_id, script_id) VALUES($1, $2) ON CONFLICT (tag_id, script_id) DO NOTHING
`

type LinkTagParams struct {
	TagID    pgtype.UUID
	ScriptID pgtype.UUID
}

func (q *Queries) LinkTag(ctx context.Context, arg LinkTagParams) error {
	_, err := q.db.Exec(ctx, linkTag, arg.TagID, arg.ScriptID)
	return err
}

const upsert = `-- name: Upsert :exec
INSERT INTO scripts (title, code, link_to_project, language_id) VALUES($1, $2, $3, $4) ON CONFLICT (title) DO NOTHING
`

type UpsertParams struct {
	Title         pgtype.Text
	Code          pgtype.Text
	LinkToProject pgtype.Text
	LanguageID    pgtype.UUID
}

func (q *Queries) Upsert(ctx context.Context, arg UpsertParams) error {
	_, err := q.db.Exec(ctx, upsert,
		arg.Title,
		arg.Code,
		arg.LinkToProject,
		arg.LanguageID,
	)
	return err
}
