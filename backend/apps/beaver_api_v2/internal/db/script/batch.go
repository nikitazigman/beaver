// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package script

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const deleteScripts = `-- name: DeleteScripts :batchexec
DELETE FROM scripts WHERE id = $1
`

type DeleteScriptsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) DeleteScripts(ctx context.Context, id []uuid.UUID) *DeleteScriptsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range id {
		vals := []interface{}{
			a,
		}
		batch.Queue(deleteScripts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &DeleteScriptsBatchResults{br, len(id), false}
}

func (b *DeleteScriptsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *DeleteScriptsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const linkContributors = `-- name: LinkContributors :batchexec
INSERT INTO contributors_scripts (contributor_id, script_id) VALUES($1, $2) ON CONFLICT (id) DO NOTHING
`

type LinkContributorsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type LinkContributorsParams struct {
	ContributorID pgtype.UUID
	ScriptID      pgtype.UUID
}

func (q *Queries) LinkContributors(ctx context.Context, arg []LinkContributorsParams) *LinkContributorsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ContributorID,
			a.ScriptID,
		}
		batch.Queue(linkContributors, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &LinkContributorsBatchResults{br, len(arg), false}
}

func (b *LinkContributorsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *LinkContributorsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const linkTags = `-- name: LinkTags :batchexec
INSERT INTO tags_scripts (tag_id, script_id) VALUES($1, $2) ON CONFLICT (id) DO NOTHING
`

type LinkTagsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type LinkTagsParams struct {
	TagID    pgtype.UUID
	ScriptID pgtype.UUID
}

func (q *Queries) LinkTags(ctx context.Context, arg []LinkTagsParams) *LinkTagsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.TagID,
			a.ScriptID,
		}
		batch.Queue(linkTags, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &LinkTagsBatchResults{br, len(arg), false}
}

func (b *LinkTagsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *LinkTagsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const unlinkContributors = `-- name: UnlinkContributors :batchexec
DELETE FROM contributors_scripts WHERE id = $1
`

type UnlinkContributorsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) UnlinkContributors(ctx context.Context, id []uuid.UUID) *UnlinkContributorsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range id {
		vals := []interface{}{
			a,
		}
		batch.Queue(unlinkContributors, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UnlinkContributorsBatchResults{br, len(id), false}
}

func (b *UnlinkContributorsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UnlinkContributorsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const unlinkTags = `-- name: UnlinkTags :batchexec
DELETE FROM tags_scripts WHERE id = $1
`

type UnlinkTagsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) UnlinkTags(ctx context.Context, id []uuid.UUID) *UnlinkTagsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range id {
		vals := []interface{}{
			a,
		}
		batch.Queue(unlinkTags, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UnlinkTagsBatchResults{br, len(id), false}
}

func (b *UnlinkTagsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UnlinkTagsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertScripts = `-- name: UpsertScripts :batchexec
INSERT INTO scripts (title, code, link_to_project, language_id) VALUES($1, $2, $3, $4) ON CONFLICT (id) DO NOTHING
`

type UpsertScriptsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertScriptsParams struct {
	Title         pgtype.Text
	Code          pgtype.Text
	LinkToProject pgtype.Text
	LanguageID    pgtype.UUID
}

func (q *Queries) UpsertScripts(ctx context.Context, arg []UpsertScriptsParams) *UpsertScriptsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Title,
			a.Code,
			a.LinkToProject,
			a.LanguageID,
		}
		batch.Queue(upsertScripts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertScriptsBatchResults{br, len(arg), false}
}

func (b *UpsertScriptsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertScriptsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
