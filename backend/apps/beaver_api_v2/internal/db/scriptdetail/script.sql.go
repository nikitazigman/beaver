// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: script.sql

package scriptdetail

import (
	"context"
)

const random = `-- name: Random :many
SELECT script_id, script_title, script_code, script_link_to_project, script_updated_at, script_created_at, language_id, language_name, tag_id, tag_name, contributor_id, contributor_name, contributor_last_name, contributor_email_address FROM scripts_details
WHERE script_id = (
SELECT script_id FROM scripts_details AS sd
    WHERE
        (sd.tag_name = ANY($1::varchar[]) OR $1 IS NULL) AND
        (sd.contributor_email_address = ANY($2::varchar[]) OR $2 IS NULL) AND
        (sd.language_name = ANY($3::varchar[]) OR $3 IS NULL)
    ORDER BY RANDOM()
    LIMIT 1
)
`

type RandomParams struct {
	Tags     []string
	Contribs []string
	Langs    []string
}

func (q *Queries) Random(ctx context.Context, arg RandomParams) ([]ScriptsDetail, error) {
	rows, err := q.db.Query(ctx, random, arg.Tags, arg.Contribs, arg.Langs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScriptsDetail
	for rows.Next() {
		var i ScriptsDetail
		if err := rows.Scan(
			&i.ScriptID,
			&i.ScriptTitle,
			&i.ScriptCode,
			&i.ScriptLinkToProject,
			&i.ScriptUpdatedAt,
			&i.ScriptCreatedAt,
			&i.LanguageID,
			&i.LanguageName,
			&i.TagID,
			&i.TagName,
			&i.ContributorID,
			&i.ContributorName,
			&i.ContributorLastName,
			&i.ContributorEmailAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
