// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: script.sql

package scriptdetail

import (
	"context"

	"github.com/google/uuid"
)

const count = `-- name: Count :one
SELECT COUNT(*) FROM scripts_details WHERE tag_id = $1 AND contributor_id = $2 AND language_id = $3
`

type CountParams struct {
	TagID         uuid.UUID
	ContributorID uuid.UUID
	LanguageID    uuid.UUID
}

func (q *Queries) Count(ctx context.Context, arg CountParams) (int64, error) {
	row := q.db.QueryRow(ctx, count, arg.TagID, arg.ContributorID, arg.LanguageID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDetailedScript = `-- name: GetDetailedScript :one
SELECT script_id, script_title, script_code, script_link_to_project, language_id, language_name, tag_id, tag_name, contributor_id, contributor_name, contributor_last_name, contributor_email_address FROM scripts_details OFFSET $1 LIMIT 1
`

func (q *Queries) GetDetailedScript(ctx context.Context, offset int32) (ScriptsDetail, error) {
	row := q.db.QueryRow(ctx, getDetailedScript, offset)
	var i ScriptsDetail
	err := row.Scan(
		&i.ScriptID,
		&i.ScriptTitle,
		&i.ScriptCode,
		&i.ScriptLinkToProject,
		&i.LanguageID,
		&i.LanguageName,
		&i.TagID,
		&i.TagName,
		&i.ContributorID,
		&i.ContributorName,
		&i.ContributorLastName,
		&i.ContributorEmailAddress,
	)
	return i, err
}
