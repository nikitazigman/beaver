// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package contributor

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createContributors = `-- name: CreateContributors :batchexec
INSERT INTO contributors (name, last_name, email_address) VALUES($1, $2, $3)
`

type CreateContributorsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateContributorsParams struct {
	Name         pgtype.Text
	LastName     pgtype.Text
	EmailAddress pgtype.Text
}

func (q *Queries) CreateContributors(ctx context.Context, arg []CreateContributorsParams) *CreateContributorsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Name,
			a.LastName,
			a.EmailAddress,
		}
		batch.Queue(createContributors, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateContributorsBatchResults{br, len(arg), false}
}

func (b *CreateContributorsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateContributorsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const deleteContributors = `-- name: DeleteContributors :batchexec
DELETE FROM contributors WHERE id = $1
`

type DeleteContributorsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) DeleteContributors(ctx context.Context, id []uuid.UUID) *DeleteContributorsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range id {
		vals := []interface{}{
			a,
		}
		batch.Queue(deleteContributors, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &DeleteContributorsBatchResults{br, len(id), false}
}

func (b *DeleteContributorsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *DeleteContributorsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
